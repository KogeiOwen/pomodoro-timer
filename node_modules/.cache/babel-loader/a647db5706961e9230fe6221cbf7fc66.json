{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owenk\\\\js-bootcamp\\\\holding\\\\challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimerComponent.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport TimerSegment from \"./TimerSegment\";\nexport default function TimerComponent({\n  timerObject,\n  setTimerObject,\n  isTimerRunning\n}) {\n  switch (timerObject.state) {\n    case \"stop\":\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }\n      });\n      break;\n\n    case \"focus\":\n      if (isTimerRunning) {\n        let width = 1 - timerObject.focusSeconds / (timerObject.focusDuration * 60);\n        width = width * 100; // console.log(width)\n\n        return /*#__PURE__*/React.createElement(TimerSegment, {\n          durationString: `Focusing for ${minutesToDuration(timerObject.focusDuration)} minutes`,\n          width: width,\n          timeString: `${secondsToDuration(timerObject.focusSeconds)} remaining`,\n          pause: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 20\n          }\n        });\n      } else {\n        let width = 1 - timerObject.focusSeconds / (timerObject.focusDuration * 60);\n        width = width * 100; // console.log(width)\n\n        return /*#__PURE__*/React.createElement(TimerSegment, {\n          durationString: `Focusing for ${minutesToDuration(timerObject.focusDuration)} minutes`,\n          width: width,\n          timeString: `${secondsToDuration(timerObject.focusSeconds)} remaining`,\n          pause: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 24\n          }\n        });\n      }\n\n      break;\n\n    case \"break\":\n      if (isTimerRunning) {\n        let width = 1 - timerObject.breakSeconds / (timerObject.breakDuration * 60);\n        width = width * 100; // console.log(width)\n\n        return /*#__PURE__*/React.createElement(TimerSegment, {\n          durationString: `On Break for ${minutesToDuration(timerObject.breakDuration)} minutes`,\n          width: width,\n          timeString: `${secondsToDuration(timerObject.breakSeconds)} remaining`,\n          pause: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 24\n          }\n        });\n      } else {\n        let width = 1 - timerObject.breakSeconds / (timerObject.breakDuration * 60);\n        width = width * 100;\n        return /*#__PURE__*/React.createElement(TimerSegment, {\n          durationString: `On Break for ${minutesToDuration(timerObject.breakDuration)} minutes`,\n          width: width,\n          timeString: `${secondsToDuration(timerObject.breakSeconds)} remaining`,\n          pause: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 28\n          }\n        });\n      }\n\n  }\n}","map":{"version":3,"sources":["C:/Users/owenk/js-bootcamp/holding/challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerComponent.js"],"names":["React","useState","minutesToDuration","secondsToDuration","TimerSegment","TimerComponent","timerObject","setTimerObject","isTimerRunning","state","width","focusSeconds","focusDuration","breakSeconds","breakDuration"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,eAAe,SAASC,cAAT,CAAyB;AAACC,EAAAA,WAAD;AAAcC,EAAAA,cAAd;AAA6BC,EAAAA;AAA7B,CAAzB,EACf;AACI,UAAOF,WAAW,CAACG,KAAnB;AAEI,SAAK,MAAL;AACI,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGA;;AACJ,SAAK,OAAL;AAEI,UAAGD,cAAH,EACA;AACI,YAAIE,KAAK,GAAG,IAAIJ,WAAW,CAACK,YAAb,IAA4BL,WAAW,CAACM,aAAZ,GAA0B,EAAtD,CAAf;AACAF,QAAAA,KAAK,GAAGA,KAAK,GAAC,GAAd,CAFJ,CAGD;;AACC,4BAAO,oBAAC,YAAD;AACP,UAAA,cAAc,EAAI,gBAAeR,iBAAiB,CAACI,WAAW,CAACM,aAAb,CAA4B,UADvE;AAEP,UAAA,KAAK,EAAGF,KAFD;AAGP,UAAA,UAAU,EAAG,GAAEP,iBAAiB,CAACG,WAAW,CAACK,YAAb,CAA2B,YAHpD;AAIP,UAAA,KAAK,EAAG,KAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMC,OAXD,MAaA;AACI,YAAID,KAAK,GAAG,IAAIJ,WAAW,CAACK,YAAb,IAA4BL,WAAW,CAACM,aAAZ,GAA0B,EAAtD,CAAf;AACAF,QAAAA,KAAK,GAAGA,KAAK,GAAC,GAAd,CAFJ,CAGI;;AACA,4BAAO,oBAAC,YAAD;AACP,UAAA,cAAc,EAAI,gBAAeR,iBAAiB,CAACI,WAAW,CAACM,aAAb,CAA4B,UADvE;AAEP,UAAA,KAAK,EAAGF,KAFD;AAGP,UAAA,UAAU,EAAG,GAAEP,iBAAiB,CAACG,WAAW,CAACK,YAAb,CAA2B,YAHpD;AAIP,UAAA,KAAK,EAAG,IAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH;;AACD;;AACA,SAAK,OAAL;AAEI,UAAGH,cAAH,EACA;AACI,YAAIE,KAAK,GAAG,IAAIJ,WAAW,CAACO,YAAb,IAA4BP,WAAW,CAACQ,aAAZ,GAA0B,EAAtD,CAAf;AACAJ,QAAAA,KAAK,GAAGA,KAAK,GAAC,GAAd,CAFJ,CAGD;;AACC,4BAAO,oBAAC,YAAD;AACP,UAAA,cAAc,EAAI,gBAAeR,iBAAiB,CAACI,WAAW,CAACQ,aAAb,CAA4B,UADvE;AAEP,UAAA,KAAK,EAAGJ,KAFD;AAGP,UAAA,UAAU,EAAG,GAAEP,iBAAiB,CAACG,WAAW,CAACO,YAAb,CAA2B,YAHpD;AAIP,UAAA,KAAK,EAAG,KAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOC,OAZD,MAaI;AACA,YAAIH,KAAK,GAAG,IAAIJ,WAAW,CAACO,YAAb,IAA4BP,WAAW,CAACQ,aAAZ,GAA0B,EAAtD,CAAf;AACAJ,QAAAA,KAAK,GAAGA,KAAK,GAAC,GAAd;AACA,4BAAO,oBAAC,YAAD;AACX,UAAA,cAAc,EAAI,gBAAeR,iBAAiB,CAACI,WAAW,CAACQ,aAAb,CAA4B,UADnE;AAEX,UAAA,KAAK,EAAGJ,KAFG;AAGX,UAAA,UAAU,EAAG,GAAEP,iBAAiB,CAACG,WAAW,CAACO,YAAb,CAA2B,YAHhD;AAIX,UAAA,KAAK,EAAG,IAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH;;AA3Db;AA+DH","sourcesContent":["import React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport TimerSegment from \"./TimerSegment\";\nexport default function TimerComponent ({timerObject, setTimerObject,isTimerRunning})\n{\n    switch(timerObject.state)\n    {\n        case \"stop\":\n            return (\n                <div></div>\n            )\n            break;\n        case \"focus\":\n            \n            if(isTimerRunning)\n            {\n                let width = 1-((timerObject.focusSeconds)/(timerObject.focusDuration*60));\n                width = width*100;\n           // console.log(width)\n            return <TimerSegment \n            durationString={ `Focusing for ${minutesToDuration(timerObject.focusDuration)} minutes`} \n            width ={width} \n            timeString={`${secondsToDuration(timerObject.focusSeconds)} remaining`}\n            pause= {false}\n            />\n            }\n            else\n            {\n                let width = 1-((timerObject.focusSeconds)/(timerObject.focusDuration*60));\n                width = width*100;\n                // console.log(width)\n                return <TimerSegment\n                durationString={ `Focusing for ${minutesToDuration(timerObject.focusDuration)} minutes`} \n                width ={width} \n                timeString={`${secondsToDuration(timerObject.focusSeconds)} remaining`}\n                pause= {true}\n                /> \n            }\n            break;\n            case \"break\":\n               \n                if(isTimerRunning)\n                {\n                    let width = 1-((timerObject.breakSeconds)/(timerObject.breakDuration*60));\n                    width = width*100;\n               // console.log(width)\n                return <TimerSegment \n                durationString={ `On Break for ${minutesToDuration(timerObject.breakDuration)} minutes`} \n                width ={width} \n                timeString={`${secondsToDuration(timerObject.breakSeconds)} remaining`}\n                pause= {false}\n                />\n               \n                }  \n                else{\n                    let width = 1-((timerObject.breakSeconds)/(timerObject.breakDuration*60));\n                    width = width*100;\n                    return <TimerSegment \n                durationString={ `On Break for ${minutesToDuration(timerObject.breakDuration)} minutes`} \n                width ={width} \n                timeString={`${secondsToDuration(timerObject.breakSeconds)} remaining`}\n                pause= {true}\n                />\n\n                }\n        }\n    \n   \n}"]},"metadata":{},"sourceType":"module"}